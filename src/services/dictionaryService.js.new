const DATAMUSE_API_URL = 'https://api.datamuse.com/words';
const DICTIONARY_API_URL = 'https://api.dictionaryapi.dev/api/v2/entries/en/';

// Filter out common, non-specific words
const isCommonWord = (word) => {
    const commonWords = new Set([
        'WORDS', 'THING', 'STUFF', 'ITEMS', 'TYPES',
        'ABOUT', 'OTHER', 'THESE', 'THOSE', 'THEIR',
        'THERE', 'WHERE', 'WHEN', 'WHAT', 'THIS',
        'WHICH', 'EVERY', 'MANY', 'SOME', 'MORE',
        'MOST', 'THAN', 'WITH', 'THAT', 'HAVE'
    ]);
    return commonWords.has(word);
};

export const getWordDefinition = async (word) => {
    try {
        const response = await fetch(`${DICTIONARY_API_URL}${word.toLowerCase()}`);
        if (!response.ok) {
            throw new Error('Definition not found');
        }
        const data = await response.json();
        
        const definitions = data[0]?.meanings?.map(meaning => ({
            partOfSpeech: meaning.partOfSpeech,
            definition: meaning.definitions[0].definition,
            example: meaning.definitions[0].example
        })) || [];

        return {
            word: data[0].word,
            phonetic: data[0].phonetic || '',
            definitions
        };
    } catch (error) {
        console.error('Error fetching definition:', error);
        return {
            word: word,
            phonetic: '',
            definitions: [{
                partOfSpeech: '',
                definition: 'Definition not available',
                example: ''
            }]
        };
    }
};

export const getDictionaryWords = async (category) => {
    try {
        // Enhanced category configuration with better queries and exclusions
        const categoryConfig = {
            programming: {
                query: 'rel_trg=programming+coding+software&topics=computing',
                exclude: ['words', 'print', 'input', 'files', 'types']
            },
            animals: {
                query: 'rel_trg=animal+species+mammal&topics=animals',
                exclude: ['breed', 'group', 'class', 'foods', 'young']
            },
            foods: {
                query: 'rel_trg=food+dish+meal&topics=cuisine',
                exclude: ['plate', 'drink', 'sweet', 'serve', 'tasty']
            },
            sports: {
                query: 'rel_trg=sport+athlete+team&topics=sports',
                exclude: ['score', 'point', 'match', 'games', 'plays']
            },
            movies: {
                query: 'rel_trg=movie+actor+film&topics=cinema',
                exclude: ['scene', 'stage', 'sound', 'video', 'watch']
            },
            music: {
                query: 'rel_trg=music+instrument+song&topics=music',
                exclude: ['sound', 'noise', 'track', 'audio', 'notes']
            },
            space: {
                query: 'rel_trg=space+planet+star&topics=astronomy',
                exclude: ['light', 'shine', 'orbit', 'float', 'space']
            },
            nature: {
                query: 'rel_trg=nature+forest+plant&topics=nature',
                exclude: ['green', 'grow', 'plant', 'water', 'earth']
            },
            colors: {
                query: 'rel_trg=color+shade+tone&topics=colors',
                exclude: ['light', 'dark', 'toned', 'shade', 'tints']
            },
            cars: {
                query: 'rel_trg=car+vehicle+brand&topics=automotive',
                exclude: ['wheel', 'speed', 'drive', 'parts', 'rides']
            }
        };

        const config = categoryConfig[category] || {
            query: `rel_trg=${category}&topics=${category}`,
            exclude: []
        };
        
        const response = await fetch(`${DATAMUSE_API_URL}?${config.query}&max=100&md=f`);
        const words = await response.json();
        
        // Apply strict filtering
        const fiveLetterWords = words
            .filter(word => {
                const upperWord = word.word.toUpperCase();
                return (
                    word.word.length === 5 &&
                    /^[A-Z]+$/i.test(word.word) && // only letters
                    !config.exclude.includes(word.word.toLowerCase()) &&
                    !isCommonWord(upperWord)
                );
            })
            .map(word => word.word.toUpperCase());

        return [...new Set(fiveLetterWords)];
    } catch (error) {
        console.error('Error fetching dictionary words:', error);
        return ['HELLO', 'WORLD', 'REACT', 'QUICK', 'JUMPS'];
    }
};

// Cache for storing fetched words
const wordCache = new Map();

export const getRandomWord = async (category, excludeWords = []) => {
    try {
        let words = wordCache.get(category);
        
        if (!words || words.length < 10) {
            words = await getDictionaryWords(category);
            wordCache.set(category, words);
        }

        const availableWords = words.filter(word => !excludeWords.includes(word));

        if (availableWords.length < 5) {
            words = await getDictionaryWords(category);
            wordCache.set(category, words);
            return getRandomWord(category, excludeWords);
        }

        const randomIndex = Math.floor(Math.random() * availableWords.length);
        const selectedWord = availableWords[randomIndex];

        wordCache.set(category, words.filter(w => w !== selectedWord));

        return selectedWord;
    } catch (error) {
        console.error('Error getting random word:', error);
        return 'ERROR';
    }
};
